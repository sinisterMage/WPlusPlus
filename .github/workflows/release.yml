name: Build and Release W++ LLVM CLI

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            llvm: 15
          - os: macos-13
            target: x86_64-apple-darwin
            llvm: 15
            arch: intel
          - os: macos-14
            target: aarch64-apple-darwin
            llvm: 15
            arch: arm
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            llvm: 15
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            llvm: 15

    runs-on: ${{ matrix.os }}

    steps:
      - name: 🧱 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable

      # === Linux LLVM ===
      - name: 🧩 Install LLVM on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y llvm-${{ matrix.llvm }} llvm-${{ matrix.llvm }}-dev clang-${{ matrix.llvm }}
          echo "LLVM_SYS_${{ matrix.llvm }}_PREFIX=/usr/lib/llvm-${{ matrix.llvm }}" >> $GITHUB_ENV

      # === macOS Intel LLVM ===
      - name: 🍎 Install LLVM on macOS (Intel)
        if: runner.os == 'macOS' && matrix.arch == 'intel'
        run: |
          brew install llvm@${{ matrix.llvm }}
          LLVM_DIR="/usr/local/opt/llvm@${{ matrix.llvm }}"
          echo "LLVM_SYS_${{ matrix.llvm }}_PREFIX=$LLVM_DIR" >> $GITHUB_ENV
          echo "LDFLAGS=-L$LLVM_DIR/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$LLVM_DIR/include" >> $GITHUB_ENV
          echo "$LLVM_DIR/bin" >> $GITHUB_PATH
          echo "✅ Configured LLVM for Intel macOS at $LLVM_DIR"

      # === macOS ARM LLVM ===
      - name: 🍏 Install LLVM on macOS (ARM)
        if: runner.os == 'macOS' && matrix.arch == 'arm'
        run: |
          brew install llvm@${{ matrix.llvm }}
          LLVM_DIR="/opt/homebrew/opt/llvm@${{ matrix.llvm }}"
          echo "LLVM_SYS_${{ matrix.llvm }}_PREFIX=$LLVM_DIR" >> $GITHUB_ENV
          echo "LDFLAGS=-L$LLVM_DIR/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$LLVM_DIR/include" >> $GITHUB_ENV
          echo "$LLVM_DIR/bin" >> $GITHUB_PATH
          echo "✅ Configured LLVM for Apple Silicon at $LLVM_DIR"

      # === Windows LLVM ===
      - name: 🪟 Install LLVM on Windows
        if: runner.os == 'Windows'
        run: |
          choco install llvm --force --version=${{ matrix.llvm }}.0
          echo "LLVM_SYS_${{ matrix.llvm }}_PREFIX=C:\\Program Files\\LLVM" >> $Env:GITHUB_ENV
          echo "C:\\Program Files\\LLVM\\bin" >> $Env:Path

      # === Build ===
      - name: ⚙️ Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      # === Package binary ===
      - name: 📦 Package binary
        shell: bash
        run: |
          mkdir -p dist
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp target/${{ matrix.target }}/release/wpp-cli.exe dist/
            zip -j dist/wpp-cli-${{ matrix.target }}.zip dist/wpp-cli.exe
          else
            cp target/${{ matrix.target }}/release/wpp-cli dist/
            tar -czf dist/wpp-cli-${{ matrix.target }}.tar.gz -C dist wpp-cli
          fi

      - name: 🆙 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: wpp-cli-${{ matrix.target }}
          path: dist/*

  release:
    name: ✨ Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 🧱 Checkout
        uses: actions/checkout@v4

      - name: ⬇️ Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: 📦 List release contents
        run: ls -R release-artifacts

      - name: 🚀 Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "W++ LLVM CLI ${{ github.ref_name }}"
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: true
          files: release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: 🦥 Build and Release W++ LLVM CLI

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Native Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            llvm: 15

          # macOS Intel
          - os: macos-13
            target: x86_64-apple-darwin
            llvm: 15
            arch: intel

          # macOS ARM
          - os: macos-14
            target: aarch64-apple-darwin
            llvm: 15
            arch: arm

          # Cross-compile Windows from Linux
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            llvm: 15

          - os: ubuntu-latest
            target: aarch64-pc-windows-gnu
            llvm: 15

    runs-on: ${{ matrix.os }}

    steps:
      - name: 🧱 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # === Cache cargo for speed ===
      - name: ⚡ Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      # === Linux LLVM + cross compilers ===
      - name: 🧩 Install LLVM and cross toolchains
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y \
            llvm-${{ matrix.llvm }} llvm-${{ matrix.llvm }}-dev clang-${{ matrix.llvm }} \
            gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "LLVM_SYS_${{ matrix.llvm }}_PREFIX=/usr/lib/llvm-${{ matrix.llvm }}" >> $GITHUB_ENV
          echo "✅ Installed LLVM ${{ matrix.llvm }} and cross-compilers"

      # === macOS Intel LLVM ===
      - name: 🍎 Install LLVM on macOS (Intel)
        if: runner.os == 'macOS' && matrix.arch == 'intel'
        run: |
          brew install llvm@${{ matrix.llvm }}
          LLVM_DIR="/usr/local/opt/llvm@${{ matrix.llvm }}"
          echo "LLVM_SYS_${{ matrix.llvm }}_PREFIX=$LLVM_DIR" >> $GITHUB_ENV
          echo "$LLVM_DIR/bin" >> $GITHUB_PATH
          echo "✅ Configured LLVM for Intel macOS at $LLVM_DIR"

      # === macOS ARM LLVM ===
      - name: 🍏 Install LLVM on macOS (ARM)
        if: runner.os == 'macOS' && matrix.arch == 'arm'
        run: |
          brew install llvm@${{ matrix.llvm }}
          LLVM_DIR="/opt/homebrew/opt/llvm@${{ matrix.llvm }}"
          echo "LLVM_SYS_${{ matrix.llvm }}_PREFIX=$LLVM_DIR" >> $GITHUB_ENV
          echo "$LLVM_DIR/bin" >> $GITHUB_PATH
          echo "✅ Configured LLVM for Apple Silicon at $LLVM_DIR"

      # === Build ===
      - name: ⚙️ Build release binary
        run: cargo build --release -p wpp-cli --target ${{ matrix.target }}

      # === Package binaries ===
      - name: 📦 Package binary
        shell: bash
        run: |
          mkdir -p dist
          cd target/${{ matrix.target }}/release

          if [[ "$RUNNER_OS" == "Windows" || "${{ matrix.target }}" == *"windows"* ]]; then
            cp wpp-cli.exe ../../../dist/
            cd ../../../dist
            zip -r wpp-cli-${{ matrix.target }}.zip wpp-cli.exe
            sha256sum wpp-cli-${{ matrix.target }}.zip > wpp-cli-${{ matrix.target }}.sha256
          else
            cp wpp-cli ../../../dist/
            cd ../../../dist
            tar -czf wpp-cli-${{ matrix.target }}.tar.gz wpp-cli
            shasum -a 256 wpp-cli-${{ matrix.target }}.tar.gz > wpp-cli-${{ matrix.target }}.sha256
          fi

      # === Upload artifacts ===
      - name: 🆙 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: wpp-cli-${{ matrix.target }}
          path: dist/*

  release:
    name: ✨ Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 🧱 Checkout repository
        uses: actions/checkout@v4

      - name: ⬇️ Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: 📦 List downloaded files
        run: ls -R release-artifacts

      - name: 🚀 Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "W++ LLVM CLI ${{ github.ref_name }}"
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: true
          files: |
            release-artifacts/**/*.{zip,tar.gz,sha256}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

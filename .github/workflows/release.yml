name: 🚀 Build & Release W++ LLVM CLI

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # === LLVM setup per platform ===
      - name: 🧰 Install LLVM (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev clang-15
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV
          echo "LLVM_CONFIG_PATH=/usr/bin/llvm-config-15" >> $GITHUB_ENV

      - name: 🍎 Install LLVM (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install llvm@15
          echo "LLVM_SYS_150_PREFIX=$(brew --prefix llvm@15)" >> $GITHUB_ENV
          echo "LLVM_CONFIG_PATH=$(brew --prefix llvm@15)/bin/llvm-config" >> $GITHUB_ENV
          echo "$(brew --prefix llvm@15)/bin" >> $GITHUB_PATH

      - name: 🪟 Configure LLVM on Windows
        if: startsWith(matrix.os, 'windows')
        run: |
          echo "Using preinstalled LLVM on Windows..."
          echo "LLVM_SYS_150_PREFIX=C:\\Program Files\\LLVM" >> $env:GITHUB_ENV
          echo "LLVM_CONFIG_PATH=C:\\Program Files\\LLVM\\bin\\llvm-config.exe" >> $env:GITHUB_ENV

      # === Build step ===
      - name: 🏗️ Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: 🧾 Verify build output
        run: |
          echo "=== Listing target/${{ matrix.target }}/release ==="
          ls -la target/${{ matrix.target }}/release || true
          echo "=== LLVM Version ==="
          llvm-config --version || echo "llvm-config not found"

      # === Package artifacts ===
      - name: 📦 Package artifact (wpp-cli)
        run: |
          mkdir -p artifacts
          BIN_PATH="target/${{ matrix.target }}/release/wpp-cli"
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            BIN_PATH="target/${{ matrix.target }}/release/wpp-cli.exe"
          fi

          if [ ! -f "$BIN_PATH" ]; then
            echo "❌ Binary not found at $BIN_PATH"
            ls -la target/${{ matrix.target }}/release || true
            exit 1
          fi

          cp "$BIN_PATH" artifacts/
          cd artifacts
          zip wpp-cli-${{ matrix.target }}.zip *

      - name: ⬆️ Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: wpp-cli-${{ matrix.target }}
          path: artifacts/*
          retention-days: 5

  # === Release publishing job ===
  release:
    name: 🪄 Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts

      - name: 📦 List downloaded artifacts
        run: ls -R ./release-artifacts

      - name: 🚀 Publish Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "W++ LLVM CLI — ${{ github.ref_name }}"
          body: |
            🦥 **W++ LLVM CLI** — Chaos meets LLVM
            ---
            ✅ Built for:
            - Linux (x86_64)
            - macOS Intel (x86_64)
            - macOS ARM (aarch64)
            - Windows (x86_64)
            - Windows ARM (aarch64)
            ---
            Run with:
            ```bash
            ./wpp-cli run examples/hello.wpp
            ```
            Enjoy chaos responsibly 🌀
          files: ./release-artifacts/**/*

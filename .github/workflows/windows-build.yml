name: 🪟 Build W++ LLVM CLI (Windows)

on:
  workflow_dispatch:

jobs:
  build-windows:
    name: Build W++ for Windows
    runs-on: windows-latest

    steps:
      - name: 🧱 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: ⚙️ Install dependencies
        shell: pwsh
        run: |
          choco install cmake ninja git python3 visualstudio2022buildtools -y
          Write-Host "✅ Installed CMake, Ninja, Git, Python, and VS Build Tools"

      - name: 🧩 Build LLVM from source
        shell: pwsh
        run: |
          $srcDir = "C:\llvm-src"
          $buildDir = "C:\llvm-build"
          $installDir = "C:\LLVM"

          Write-Host "⬇️ Cloning LLVM 15.0.7 source..."
          git clone https://github.com/llvm/llvm-project.git $srcDir --depth 1 --branch llvmorg-15.0.7

          Write-Host "🛠️ Configuring LLVM with CMake..."
          cmake -S "$srcDir\llvm" -B $buildDir `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX=$installDir `
            -DLLVM_ENABLE_PROJECTS="clang;lld" `
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64" `
            -DLLVM_BUILD_TOOLS=ON `
            -DLLVM_INCLUDE_TESTS=OFF `
            -DLLVM_INCLUDE_DOCS=OFF `
            -DLLVM_INCLUDE_EXAMPLES=OFF `
            -DLLVM_ENABLE_TERMINFO=OFF `
            -DLLVM_ENABLE_LIBXML2=OFF `
            -DLLVM_ENABLE_ZLIB=ON `
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=OFF

          Write-Host "⚙️ Building LLVM (this may take a while)..."
          cmake --build $buildDir --target install --config Release

          Write-Host "✅ LLVM installed to $installDir"

          # === llvm-config sanity check ===
          $llvmConfig = "$installDir\bin\llvm-config.exe"
          if (!(Test-Path $llvmConfig)) {
            Write-Host "⚠️ llvm-config.exe not found in expected path. Searching..."
            $found = Get-ChildItem -Recurse -Path $installDir -Filter "llvm-config.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
              Write-Host "✅ Found llvm-config.exe at: $($found.FullName)"
              $llvmConfig = $found.FullName
            } else {
              Write-Host "❌ llvm-config.exe missing entirely. Build may fail."
            }
          }

          if (Test-Path $llvmConfig) {
            Write-Host "🔍 llvm-config version check:"
            & $llvmConfig --version
          }

          "LLVM_SYS_150_PREFIX=$installDir" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          "LLVM_CONFIG_PATH=$llvmConfig" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          "$installDir\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

      - name: ⚙️ Build W++ for Windows
        run: cargo build --release -p wpp-cli --target x86_64-pc-windows-msvc

      - name: 📦 Package binary
        shell: pwsh
        run: |
          mkdir dist
          Copy-Item target\x86_64-pc-windows-msvc\release\wpp-cli.exe dist\
          Compress-Archive -Path dist\wpp-cli.exe -DestinationPath dist\wpp-cli-x86_64-pc-windows-msvc.zip
          Get-FileHash dist\wpp-cli-x86_64-pc-windows-msvc.zip -Algorithm SHA256 | ForEach-Object {
            $_.Hash + "  wpp-cli-x86_64-pc-windows-msvc.zip" } > dist\wpp-cli-x86_64-pc-windows-msvc.sha256

      - name: 🆙 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wpp-cli-x86_64-pc-windows-msvc
          path: dist/*

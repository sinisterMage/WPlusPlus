using Newtonsoft.Json;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Schema;
using Newtonsoft.Json.Serialization;

ingot Newtonsoft.Json {
  class DefaultJsonNameTable {
    /// Gets a string containing the same characters as the specified range of characters in the given array.
    func Get(Char[] key, Int32 start, Int32 length): String
    /// Adds the specified string into name table.
    func Add(String key): String
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class IArrayPool`1 {
    /// Rent an array from the pool. This array must be returned when it is no longer needed.
    func Rent(Int32 minimumLength): T[]
    func Return(T[] array): Void
  }
  class IJsonLineInfo {
    /// Gets a value indicating whether the class can return line information.
    func HasLineInfo(): Boolean
  }
  class JsonArrayAttribute {
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func Match(Object obj): Boolean
    func IsDefaultAttribute(): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class JsonConstructorAttribute {
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func Match(Object obj): Boolean
    func IsDefaultAttribute(): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class JsonContainerAttribute {
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func Match(Object obj): Boolean
    func IsDefaultAttribute(): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class JsonConvert {
    /// Converts the  to its JSON string representation.
    func ToString(DateTime value): String
    /// Converts the  to its JSON string representation using the  specified.
    func ToString(DateTime value, DateFormatHandling format, DateTimeZoneHandling timeZoneHandling): String
    /// Converts the  to its JSON string representation.
    func ToString(Boolean value): String
    /// Converts the  to its JSON string representation.
    func ToString(Char value): String
    /// Converts the  to its JSON string representation.
    func ToString(Enum value): String
    /// Converts the  to its JSON string representation.
    func ToString(Int32 value): String
    /// Converts the  to its JSON string representation.
    func ToString(Int16 value): String
    /// Converts the  to its JSON string representation.
    func ToString(UInt16 value): String
    /// Converts the  to its JSON string representation.
    func ToString(UInt32 value): String
    /// Converts the   to its JSON string representation.
    func ToString(Int64 value): String
    /// Converts the  to its JSON string representation.
    func ToString(UInt64 value): String
    /// Converts the  to its JSON string representation.
    func ToString(Single value): String
    /// Converts the  to its JSON string representation.
    func ToString(Double value): String
    /// Converts the  to its JSON string representation.
    func ToString(Byte value): String
    /// Converts the  to its JSON string representation.
    func ToString(SByte value): String
    /// Converts the  to its JSON string representation.
    func ToString(Decimal value): String
    /// Converts the  to its JSON string representation.
    func ToString(Guid value): String
    /// Converts the  to its JSON string representation.
    func ToString(TimeSpan value): String
    /// Converts the  to its JSON string representation.
    func ToString(Uri value): String
    /// Converts the  to its JSON string representation.
    func ToString(String value): String
    /// Converts the  to its JSON string representation.
    func ToString(String value, Char delimiter): String
    /// Converts the  to its JSON string representation.
    func ToString(String value, Char delimiter, StringEscapeHandling stringEscapeHandling): String
    /// Converts the  to its JSON string representation.
    func ToString(Object value): String
    /// Serializes the specified object to a JSON string.
    func SerializeObject(Object value): String
    /// Serializes the specified object to a JSON string using formatting.
    func SerializeObject(Object value, Formatting formatting): String
    /// Serializes the specified object to a JSON string using a collection of .
    func SerializeObject(Object value, JsonConverter[] converters): String
    /// Serializes the specified object to a JSON string using formatting and a collection of .
    func SerializeObject(Object value, Formatting formatting, JsonConverter[] converters): String
    /// Serializes the specified object to a JSON string using .
    func SerializeObject(Object value, JsonSerializerSettings settings): String
    /// Serializes the specified object to a JSON string using a type, formatting and .
    func SerializeObject(Object value, Type type, JsonSerializerSettings settings): String
    /// Serializes the specified object to a JSON string using formatting and .
    func SerializeObject(Object value, Formatting formatting, JsonSerializerSettings settings): String
    /// Serializes the specified object to a JSON string using a type, formatting and .
    func SerializeObject(Object value, Type type, Formatting formatting, JsonSerializerSettings settings): String
    /// Deserializes the JSON to a .NET object.
    func DeserializeObject(String value): Object
    /// Deserializes the JSON to a .NET object using .
    func DeserializeObject(String value, JsonSerializerSettings settings): Object
    /// Deserializes the JSON to the specified .NET type.
    func DeserializeObject(String value, Type type): Object
    /// Deserializes the JSON to a .NET object.
    func DeserializeObject(String value): T
    func DeserializeAnonymousType(String value, T anonymousTypeObject): T
    func DeserializeAnonymousType(String value, T anonymousTypeObject, JsonSerializerSettings settings): T
    func DeserializeObject(String value, JsonConverter[] converters): T
    /// Deserializes the JSON to a .NET object using .
    func DeserializeObject(String value, JsonSerializerSettings settings): T
    /// Deserializes the JSON to the specified .NET type using a collection of .
    func DeserializeObject(String value, Type type, JsonConverter[] converters): Object
    /// Deserializes the JSON to the specified .NET type using .
    func DeserializeObject(String value, Type type, JsonSerializerSettings settings): Object
    /// Populates the object with values from the JSON string.
    func PopulateObject(String value, Object target): Void
    /// Populates the object with values from the JSON string using .
    func PopulateObject(String value, Object target, JsonSerializerSettings settings): Void
    /// Serializes the  to a JSON string.
    func SerializeXmlNode(XmlNode node): String
    /// Serializes the  to a JSON string using formatting.
    func SerializeXmlNode(XmlNode node, Formatting formatting): String
    /// Serializes the  to a JSON string using formatting and omits the root object if  is true.
    func SerializeXmlNode(XmlNode node, Formatting formatting, Boolean omitRootObject): String
    /// Deserializes the  from a JSON string.
    func DeserializeXmlNode(String value): XmlDocument
    /// Deserializes the  from a JSON string nested in a root element specified by .
    func DeserializeXmlNode(String value, String deserializeRootElementName): XmlDocument
    /// Deserializes the  from a JSON string nested in a root element specified by 
            and writes a Json.NET array attribute for collections.
    func DeserializeXmlNode(String value, String deserializeRootElementName, Boolean writeArrayAttribute): XmlDocument
    /// Deserializes the  from a JSON string nested in a root element specified by ,
            writes a Json.NET array attribute for collections, and encodes special characters.
    func DeserializeXmlNode(String value, String deserializeRootElementName, Boolean writeArrayAttribute, Boolean encodeSpecialCharacters): XmlDocument
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    /// Determines whether this instance can convert the specified object type.
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonConverter`1 {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    func WriteJson(JsonWriter writer, T value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    func ReadJson(JsonReader reader, Type objectType, T existingValue, Boolean hasExistingValue, JsonSerializer serializer): T
    /// Determines whether this instance can convert the specified object type.
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonConverterAttribute {
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func Match(Object obj): Boolean
    func IsDefaultAttribute(): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class JsonConverterCollection {
    func Add(JsonConverter item): Void
    func Clear(): Void
    func CopyTo(JsonConverter[] array, Int32 index): Void
    func Contains(JsonConverter item): Boolean
    func GetEnumerator(): IEnumerator`1
    func IndexOf(JsonConverter item): Int32
    func Insert(Int32 index, JsonConverter item): Void
    func Remove(JsonConverter item): Boolean
    func RemoveAt(Int32 index): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonDictionaryAttribute {
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func Match(Object obj): Boolean
    func IsDefaultAttribute(): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class JsonException {
    func GetBaseException(): Exception
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func ToString(): String
    func GetType(): Type
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonExtensionDataAttribute {
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func Match(Object obj): Boolean
    func IsDefaultAttribute(): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class JsonIgnoreAttribute {
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func Match(Object obj): Boolean
    func IsDefaultAttribute(): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class JsonNameTable {
    /// Gets a string containing the same characters as the specified range of characters in the given array.
    func Get(Char[] key, Int32 start, Int32 length): String
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonObjectAttribute {
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func Match(Object obj): Boolean
    func IsDefaultAttribute(): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class JsonPropertyAttribute {
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func Match(Object obj): Boolean
    func IsDefaultAttribute(): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class JsonReader {
    /// Reads the next JSON token from the source.
    func Read(): Boolean
    /// Reads the next JSON token from the source as a  of .
    func ReadAsInt32(): Nullable`1
    /// Reads the next JSON token from the source as a .
    func ReadAsString(): String
    /// Reads the next JSON token from the source as a [].
    func ReadAsBytes(): Byte[]
    /// Reads the next JSON token from the source as a  of .
    func ReadAsDouble(): Nullable`1
    /// Reads the next JSON token from the source as a  of .
    func ReadAsBoolean(): Nullable`1
    /// Reads the next JSON token from the source as a  of .
    func ReadAsDecimal(): Nullable`1
    /// Reads the next JSON token from the source as a  of .
    func ReadAsDateTime(): Nullable`1
    /// Skips the children of the current token.
    func Skip(): Void
    /// Changes the reader's state to .
            If  is set to true, the source is also closed.
    func Close(): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonReaderException {
    func GetBaseException(): Exception
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func ToString(): String
    func GetType(): Type
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonRequiredAttribute {
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func Match(Object obj): Boolean
    func IsDefaultAttribute(): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class JsonSerializationException {
    func GetBaseException(): Exception
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func ToString(): String
    func GetType(): Type
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonSerializer {
    /// Creates a new  instance.
            The  will not use default settings 
            from .
    func Create(): JsonSerializer
    /// Creates a new  instance using the specified .
            The  will not use default settings 
            from .
    func Create(JsonSerializerSettings settings): JsonSerializer
    /// Creates a new  instance.
            The  will use default settings 
            from .
    func CreateDefault(): JsonSerializer
    /// Creates a new  instance using the specified .
            The  will use default settings 
            from  as well as the specified .
    func CreateDefault(JsonSerializerSettings settings): JsonSerializer
    /// Populates the JSON values onto the target object.
    func Populate(TextReader reader, Object target): Void
    /// Populates the JSON values onto the target object.
    func Populate(JsonReader reader, Object target): Void
    /// Deserializes the JSON structure contained by the specified .
    func Deserialize(JsonReader reader): Object
    /// Deserializes the JSON structure contained by the specified 
            into an instance of the specified type.
    func Deserialize(TextReader reader, Type objectType): Object
    /// Deserializes the JSON structure contained by the specified .
    func Deserialize(JsonReader reader): T
    /// Deserializes the JSON structure contained by the specified 
            into an instance of the specified type.
    func Deserialize(JsonReader reader, Type objectType): Object
    /// Serializes the specified  and writes the JSON structure
            using the specified .
    func Serialize(TextWriter textWriter, Object value): Void
    /// Serializes the specified  and writes the JSON structure
            using the specified .
    func Serialize(JsonWriter jsonWriter, Object value, Type objectType): Void
    /// Serializes the specified  and writes the JSON structure
            using the specified .
    func Serialize(TextWriter textWriter, Object value, Type objectType): Void
    /// Serializes the specified  and writes the JSON structure
            using the specified .
    func Serialize(JsonWriter jsonWriter, Object value): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonSerializerSettings {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonTextReader {
    /// Reads the next JSON token from the underlying .
    func Read(): Boolean
    /// Reads the next JSON token from the underlying  as a  of .
    func ReadAsInt32(): Nullable`1
    /// Reads the next JSON token from the underlying  as a  of .
    func ReadAsDateTime(): Nullable`1
    /// Reads the next JSON token from the underlying  as a .
    func ReadAsString(): String
    /// Reads the next JSON token from the underlying  as a [].
    func ReadAsBytes(): Byte[]
    /// Reads the next JSON token from the underlying  as a  of .
    func ReadAsBoolean(): Nullable`1
    /// Reads the next JSON token from the underlying  as a  of .
    func ReadAsDecimal(): Nullable`1
    /// Reads the next JSON token from the underlying  as a  of .
    func ReadAsDouble(): Nullable`1
    /// Changes the reader's state to .
            If  is set to true, the underlying  is also closed.
    func Close(): Void
    /// Gets a value indicating whether the class can return line information.
    func HasLineInfo(): Boolean
    func Skip(): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonTextWriter {
    /// Flushes whatever is in the buffer to the underlying  and also flushes the underlying .
    func Flush(): Void
    /// Closes this writer.
            If  is set to true, the underlying  is also closed.
            If  is set to true, the JSON is auto-completed.
    func Close(): Void
    /// Writes the beginning of a JSON object.
    func WriteStartObject(): Void
    /// Writes the beginning of a JSON array.
    func WriteStartArray(): Void
    /// Writes the start of a constructor with the given name.
    func WriteStartConstructor(String name): Void
    /// Writes the property name of a name/value pair on a JSON object.
    func WritePropertyName(String name): Void
    /// Writes the property name of a name/value pair on a JSON object.
    func WritePropertyName(String name, Boolean escape): Void
    /// Writes a  value.
            An error will raised if the value cannot be written as a single JSON token.
    func WriteValue(Object value): Void
    /// Writes a null value.
    func WriteNull(): Void
    /// Writes an undefined value.
    func WriteUndefined(): Void
    /// Writes raw JSON.
    func WriteRaw(String json): Void
    /// Writes a  value.
    func WriteValue(String value): Void
    /// Writes a  value.
    func WriteValue(Int32 value): Void
    /// Writes a  value.
    func WriteValue(UInt32 value): Void
    /// Writes a  value.
    func WriteValue(Int64 value): Void
    /// Writes a  value.
    func WriteValue(UInt64 value): Void
    /// Writes a  value.
    func WriteValue(Single value): Void
    func WriteValue(Nullable`1 value): Void
    /// Writes a  value.
    func WriteValue(Double value): Void
    func WriteValue(Nullable`1 value): Void
    /// Writes a  value.
    func WriteValue(Boolean value): Void
    /// Writes a  value.
    func WriteValue(Int16 value): Void
    /// Writes a  value.
    func WriteValue(UInt16 value): Void
    /// Writes a  value.
    func WriteValue(Char value): Void
    /// Writes a  value.
    func WriteValue(Byte value): Void
    /// Writes a  value.
    func WriteValue(SByte value): Void
    /// Writes a  value.
    func WriteValue(Decimal value): Void
    /// Writes a  value.
    func WriteValue(DateTime value): Void
    /// Writes a [] value.
    func WriteValue(Byte[] value): Void
    /// Writes a  value.
    func WriteValue(Guid value): Void
    /// Writes a  value.
    func WriteValue(TimeSpan value): Void
    /// Writes a  value.
    func WriteValue(Uri value): Void
    /// Writes a comment /*...*/ containing the specified text.
    func WriteComment(String text): Void
    /// Writes the given white space.
    func WriteWhitespace(String ws): Void
    func WriteEndObject(): Void
    func WriteEndArray(): Void
    func WriteEndConstructor(): Void
    func WriteEnd(): Void
    func WriteToken(JsonReader reader): Void
    func WriteToken(JsonReader reader, Boolean writeChildren): Void
    func WriteToken(JsonToken token, Object value): Void
    func WriteToken(JsonToken token): Void
    func WriteRawValue(String json): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonValidatingReader {
    /// Changes the reader's state to .
            If  is set to true, the underlying  is also closed.
    func Close(): Void
    /// Reads the next JSON token from the underlying  as a  of .
    func ReadAsInt32(): Nullable`1
    /// Reads the next JSON token from the underlying  as a [].
    func ReadAsBytes(): Byte[]
    /// Reads the next JSON token from the underlying  as a  of .
    func ReadAsDecimal(): Nullable`1
    /// Reads the next JSON token from the underlying  as a  of .
    func ReadAsDouble(): Nullable`1
    /// Reads the next JSON token from the underlying  as a  of .
    func ReadAsBoolean(): Nullable`1
    /// Reads the next JSON token from the underlying  as a .
    func ReadAsString(): String
    /// Reads the next JSON token from the underlying  as a  of .
    func ReadAsDateTime(): Nullable`1
    /// Reads the next JSON token from the underlying .
    func Read(): Boolean
    func Skip(): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonWriter {
    /// Flushes whatever is in the buffer to the destination and also flushes the destination.
    func Flush(): Void
    /// Closes this writer.
            If  is set to true, the destination is also closed.
            If  is set to true, the JSON is auto-completed.
    func Close(): Void
    /// Writes the beginning of a JSON object.
    func WriteStartObject(): Void
    /// Writes the end of a JSON object.
    func WriteEndObject(): Void
    /// Writes the beginning of a JSON array.
    func WriteStartArray(): Void
    /// Writes the end of an array.
    func WriteEndArray(): Void
    /// Writes the start of a constructor with the given name.
    func WriteStartConstructor(String name): Void
    /// Writes the end constructor.
    func WriteEndConstructor(): Void
    /// Writes the property name of a name/value pair of a JSON object.
    func WritePropertyName(String name): Void
    /// Writes the property name of a name/value pair of a JSON object.
    func WritePropertyName(String name, Boolean escape): Void
    /// Writes the end of the current JSON object or array.
    func WriteEnd(): Void
    /// Writes the current  token and its children.
    func WriteToken(JsonReader reader): Void
    /// Writes the current  token.
    func WriteToken(JsonReader reader, Boolean writeChildren): Void
    /// Writes the  token and its value.
    func WriteToken(JsonToken token, Object value): Void
    /// Writes the  token.
    func WriteToken(JsonToken token): Void
    /// Writes a null value.
    func WriteNull(): Void
    /// Writes an undefined value.
    func WriteUndefined(): Void
    /// Writes raw JSON without changing the writer's state.
    func WriteRaw(String json): Void
    /// Writes raw JSON where a value is expected and updates the writer's state.
    func WriteRawValue(String json): Void
    /// Writes a  value.
    func WriteValue(String value): Void
    /// Writes a  value.
    func WriteValue(Int32 value): Void
    /// Writes a  value.
    func WriteValue(UInt32 value): Void
    /// Writes a  value.
    func WriteValue(Int64 value): Void
    /// Writes a  value.
    func WriteValue(UInt64 value): Void
    /// Writes a  value.
    func WriteValue(Single value): Void
    /// Writes a  value.
    func WriteValue(Double value): Void
    /// Writes a  value.
    func WriteValue(Boolean value): Void
    /// Writes a  value.
    func WriteValue(Int16 value): Void
    /// Writes a  value.
    func WriteValue(UInt16 value): Void
    /// Writes a  value.
    func WriteValue(Char value): Void
    /// Writes a  value.
    func WriteValue(Byte value): Void
    /// Writes a  value.
    func WriteValue(SByte value): Void
    /// Writes a  value.
    func WriteValue(Decimal value): Void
    /// Writes a  value.
    func WriteValue(DateTime value): Void
    /// Writes a  value.
    func WriteValue(Guid value): Void
    /// Writes a  value.
    func WriteValue(TimeSpan value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    /// Writes a [] value.
    func WriteValue(Byte[] value): Void
    /// Writes a  value.
    func WriteValue(Uri value): Void
    /// Writes a  value.
            An error will raised if the value cannot be written as a single JSON token.
    func WriteValue(Object value): Void
    /// Writes a comment /*...*/ containing the specified text.
    func WriteComment(String text): Void
    /// Writes the given white space.
    func WriteWhitespace(String ws): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonWriterException {
    func GetBaseException(): Exception
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func ToString(): String
    func GetType(): Type
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class CamelCaseNamingStrategy {
    func GetPropertyName(String name, Boolean hasSpecifiedName): String
    func GetExtensionDataName(String name): String
    func GetDictionaryKey(String key): String
    func GetHashCode(): Int32
    func Equals(Object obj): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class CamelCasePropertyNamesContractResolver {
    /// Resolves the contract for a given type.
    func ResolveContract(Type type): JsonContract
    func GetResolvedPropertyName(String propertyName): String
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class DefaultContractResolver {
    /// Resolves the contract for a given type.
    func ResolveContract(Type type): JsonContract
    /// Gets the resolved name of the property.
    func GetResolvedPropertyName(String propertyName): String
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class DefaultNamingStrategy {
    func GetPropertyName(String name, Boolean hasSpecifiedName): String
    func GetExtensionDataName(String name): String
    func GetDictionaryKey(String key): String
    func GetHashCode(): Int32
    func Equals(Object obj): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class DefaultSerializationBinder {
    /// When overridden in a derived class, controls the binding of a serialized object to a type.
    func BindToType(String assemblyName, String typeName): Type
    func BindToName(Type serializedType, String& assemblyName, String& typeName): Void
    func BindToName(Type serializedType, String& assemblyName, String& typeName): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class DiagnosticsTraceWriter {
    /// Writes the specified trace level, message and optional exception.
    func Trace(TraceLevel level, String message, Exception ex): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class DynamicValueProvider {
    /// Sets the value.
    func SetValue(Object target, Object value): Void
    /// Gets the value.
    func GetValue(Object target): Object
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class ErrorContext {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class ErrorEventArgs {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class IAttributeProvider {
    /// Returns a collection of all of the attributes, or an empty collection if there are no attributes.
    func GetAttributes(Boolean inherit): IList`1
    /// Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
    func GetAttributes(Type attributeType, Boolean inherit): IList`1
  }
  class IContractResolver {
    /// Resolves the contract for a given type.
    func ResolveContract(Type type): JsonContract
  }
  class IReferenceResolver {
    /// Resolves a reference to its object.
    func ResolveReference(Object context, String reference): Object
    /// Gets the reference for the specified object.
    func GetReference(Object context, Object value): String
    /// Determines whether the specified object is referenced.
    func IsReferenced(Object context, Object value): Boolean
    /// Adds a reference to the specified object.
    func AddReference(Object context, String reference, Object value): Void
  }
  class ISerializationBinder {
    /// When implemented, controls the binding of a serialized object to a type.
    func BindToType(String assemblyName, String typeName): Type
    func BindToName(Type serializedType, String& assemblyName, String& typeName): Void
  }
  class ITraceWriter {
    /// Writes the specified trace level, message and optional exception.
    func Trace(TraceLevel level, String message, Exception ex): Void
  }
  class IValueProvider {
    /// Sets the value.
    func SetValue(Object target, Object value): Void
    /// Gets the value.
    func GetValue(Object target): Object
  }
  class JsonArrayContract {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonContainerContract {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class SerializationCallback {
    func Invoke(Object o, StreamingContext context): Void
    func BeginInvoke(Object o, StreamingContext context, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): Void
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class SerializationErrorCallback {
    func Invoke(Object o, StreamingContext context, ErrorContext errorContext): Void
    func BeginInvoke(Object o, StreamingContext context, ErrorContext errorContext, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): Void
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class ExtensionDataSetter {
    func Invoke(Object o, String key, Object value): Void
    func BeginInvoke(Object o, String key, Object value, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): Void
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class ExtensionDataGetter {
    func Invoke(Object o): IEnumerable`1
    func BeginInvoke(Object o, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): IEnumerable`1
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class JsonContract {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonDictionaryContract {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonISerializableContract {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonLinqContract {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonObjectContract {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonPrimitiveContract {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonProperty {
    /// Returns a  that represents this instance.
    func ToString(): String
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonPropertyCollection {
    /// Adds a  object.
    func AddProperty(JsonProperty property): Void
    /// Gets the closest matching  object.
            First attempts to get an exact case match of  and then
            a case insensitive match.
    func GetClosestMatchProperty(String propertyName): JsonProperty
    /// Gets a property by property name.
    func GetProperty(String propertyName, StringComparison comparisonType): JsonProperty
    func Contains(String key): Boolean
    func TryGetValue(String key, JsonProperty& item): Boolean
    func Remove(String key): Boolean
    func Add(JsonProperty item): Void
    func Clear(): Void
    func CopyTo(JsonProperty[] array, Int32 index): Void
    func Contains(JsonProperty item): Boolean
    func GetEnumerator(): IEnumerator`1
    func IndexOf(JsonProperty item): Int32
    func Insert(Int32 index, JsonProperty item): Void
    func Remove(JsonProperty item): Boolean
    func RemoveAt(Int32 index): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonStringContract {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class KebabCaseNamingStrategy {
    func GetPropertyName(String name, Boolean hasSpecifiedName): String
    func GetExtensionDataName(String name): String
    func GetDictionaryKey(String key): String
    func GetHashCode(): Int32
    func Equals(Object obj): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class MemoryTraceWriter {
    /// Writes the specified trace level, message and optional exception.
    func Trace(TraceLevel level, String message, Exception ex): Void
    /// Returns an enumeration of the most recent trace messages.
    func GetTraceMessages(): IEnumerable`1
    /// Returns a  of the most recent trace messages.
    func ToString(): String
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class NamingStrategy {
    /// Gets the serialized name for a given property name.
    func GetPropertyName(String name, Boolean hasSpecifiedName): String
    /// Gets the serialized name for a given extension data name.
    func GetExtensionDataName(String name): String
    /// Gets the serialized key for a given dictionary key.
    func GetDictionaryKey(String key): String
    /// Hash code calculation
    func GetHashCode(): Int32
    /// Object equality implementation
    func Equals(Object obj): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class ObjectConstructor`1 {
    func Invoke(Object[] args): Object
    func BeginInvoke(Object[] args, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): Object
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class OnErrorAttribute {
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func Match(Object obj): Boolean
    func IsDefaultAttribute(): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class ReflectionAttributeProvider {
    /// Returns a collection of all of the attributes, or an empty collection if there are no attributes.
    func GetAttributes(Boolean inherit): IList`1
    /// Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
    func GetAttributes(Type attributeType, Boolean inherit): IList`1
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class ReflectionValueProvider {
    /// Sets the value.
    func SetValue(Object target, Object value): Void
    /// Gets the value.
    func GetValue(Object target): Object
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class SnakeCaseNamingStrategy {
    func GetPropertyName(String name, Boolean hasSpecifiedName): String
    func GetExtensionDataName(String name): String
    func GetDictionaryKey(String key): String
    func GetHashCode(): Int32
    func Equals(Object obj): Boolean
    func GetType(): Type
    func ToString(): String
  }
  class Func`1 {
    func Invoke(): TResult
    func BeginInvoke(AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): TResult
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class Func`2 {
    func Invoke(T a): TResult
    func BeginInvoke(T a, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): TResult
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class Func`3 {
    func Invoke(T1 arg1, T2 arg2): TResult
    func BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): TResult
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class Func`4 {
    func Invoke(T1 arg1, T2 arg2, T3 arg3): TResult
    func BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): TResult
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class Func`5 {
    func Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4): TResult
    func BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): TResult
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class Action {
    func Invoke(): Void
    func BeginInvoke(AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): Void
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class Action`2 {
    func Invoke(T1 arg1, T2 arg2): Void
    func BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): Void
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class Action`3 {
    func Invoke(T1 arg1, T2 arg2, T3 arg3): Void
    func BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): Void
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class Action`4 {
    func Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4): Void
    func BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): Void
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class Extensions {
    /// Determines whether the  is valid.
            
            JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.
    func IsValid(JToken source, JsonSchema schema): Boolean
    func IsValid(JToken source, JsonSchema schema, IList`1& errorMessages): Boolean
    /// Validates the specified .
            
            JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.
    func Validate(JToken source, JsonSchema schema): Void
    /// Validates the specified .
            
            JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.
    func Validate(JToken source, JsonSchema schema, ValidationEventHandler validationEventHandler): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonSchema {
    /// Reads a  from the specified .
    func Read(JsonReader reader): JsonSchema
    /// Reads a  from the specified .
    func Read(JsonReader reader, JsonSchemaResolver resolver): JsonSchema
    /// Load a  from a string that contains JSON Schema.
    func Parse(String json): JsonSchema
    /// Load a  from a string that contains JSON Schema using the specified .
    func Parse(String json, JsonSchemaResolver resolver): JsonSchema
    /// Writes this schema to a .
    func WriteTo(JsonWriter writer): Void
    /// Writes this schema to a  using the specified .
    func WriteTo(JsonWriter writer, JsonSchemaResolver resolver): Void
    /// Returns a  that represents the current .
    func ToString(): String
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonSchemaException {
    func GetBaseException(): Exception
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func ToString(): String
    func GetType(): Type
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonSchemaGenerator {
    /// Generate a  from the specified type.
    func Generate(Type type): JsonSchema
    /// Generate a  from the specified type.
    func Generate(Type type, JsonSchemaResolver resolver): JsonSchema
    /// Generate a  from the specified type.
    func Generate(Type type, Boolean rootSchemaNullable): JsonSchema
    /// Generate a  from the specified type.
    func Generate(Type type, JsonSchemaResolver resolver, Boolean rootSchemaNullable): JsonSchema
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonSchemaResolver {
    /// Gets a  for the specified reference.
    func GetSchema(String reference): JsonSchema
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class ValidationEventArgs {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class ValidationEventHandler {
    func Invoke(Object sender, ValidationEventArgs e): Void
    func BeginInvoke(Object sender, ValidationEventArgs e, AsyncCallback callback, Object object): IAsyncResult
    func EndInvoke(IAsyncResult result): Void
    func GetObjectData(SerializationInfo info, StreamingContext context): Void
    func Equals(Object obj): Boolean
    func GetInvocationList(): Delegate[]
    func GetHashCode(): Int32
    func Clone(): Object
    func DynamicInvoke(Object[] args): Object
    func GetType(): Type
    func ToString(): String
  }
  class Extensions {
    func Ancestors(IEnumerable`1 source): IJEnumerable`1
    func AncestorsAndSelf(IEnumerable`1 source): IJEnumerable`1
    func Descendants(IEnumerable`1 source): IJEnumerable`1
    func DescendantsAndSelf(IEnumerable`1 source): IJEnumerable`1
    func Properties(IEnumerable`1 source): IJEnumerable`1
    func Values(IEnumerable`1 source, Object key): IJEnumerable`1
    func Values(IEnumerable`1 source): IJEnumerable`1
    func Values(IEnumerable`1 source, Object key): IEnumerable`1
    func Values(IEnumerable`1 source): IEnumerable`1
    func Value(IEnumerable`1 value): U
    func Value(IEnumerable`1 value): U
    func Children(IEnumerable`1 source): IJEnumerable`1
    func Children(IEnumerable`1 source): IEnumerable`1
    func AsJEnumerable(IEnumerable`1 source): IJEnumerable`1
    func AsJEnumerable(IEnumerable`1 source): IJEnumerable`1
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class IJEnumerable`1 {
  }
  class JArray {
    /// Loads an  from a .
    func Load(JsonReader reader): JArray
    /// Loads an  from a .
    func Load(JsonReader reader, JsonLoadSettings settings): JArray
    /// Load a  from a string that contains JSON.
    func Parse(String json): JArray
    /// Load a  from a string that contains JSON.
    func Parse(String json, JsonLoadSettings settings): JArray
    /// Creates a  from an object.
    func FromObject(Object o): JArray
    /// Creates a  from an object.
    func FromObject(Object o, JsonSerializer jsonSerializer): JArray
    /// Writes this token to a .
    func WriteTo(JsonWriter writer, JsonConverter[] converters): Void
    /// Determines the index of a specific item in the .
    func IndexOf(JToken item): Int32
    /// Inserts an item to the  at the specified index.
    func Insert(Int32 index, JToken item): Void
    /// Removes the  item at the specified index.
    func RemoveAt(Int32 index): Void
    /// Returns an enumerator that iterates through the collection.
    func GetEnumerator(): IEnumerator`1
    /// Adds an item to the .
    func Add(JToken item): Void
    /// Removes all items from the .
    func Clear(): Void
    /// Determines whether the  contains a specific value.
    func Contains(JToken item): Boolean
    /// Copies the elements of the  to an array, starting at a particular array index.
    func CopyTo(JToken[] array, Int32 arrayIndex): Void
    /// Removes the first occurrence of a specific object from the .
    func Remove(JToken item): Boolean
    func Children(): JEnumerable`1
    func Values(): IEnumerable`1
    func Descendants(): IEnumerable`1
    func DescendantsAndSelf(): IEnumerable`1
    func Add(Object content): Void
    func AddFirst(Object content): Void
    func CreateWriter(): JsonWriter
    func ReplaceAll(Object content): Void
    func RemoveAll(): Void
    func Merge(Object content): Void
    func Merge(Object content, JsonMergeSettings settings): Void
    func AddAfterSelf(Object content): Void
    func AddBeforeSelf(Object content): Void
    func Ancestors(): IEnumerable`1
    func AncestorsAndSelf(): IEnumerable`1
    func AfterSelf(): IEnumerable`1
    func BeforeSelf(): IEnumerable`1
    func Value(Object key): T
    func Children(): JEnumerable`1
    func Remove(): Void
    func Replace(JToken value): Void
    func ToString(): String
    func ToString(Formatting formatting, JsonConverter[] converters): String
    func CreateReader(): JsonReader
    func ToObject(): T
    func ToObject(Type objectType): Object
    func ToObject(JsonSerializer jsonSerializer): T
    func ToObject(Type objectType, JsonSerializer jsonSerializer): Object
    func SelectToken(String path): JToken
    func SelectToken(String path, Boolean errorWhenNoMatch): JToken
    func SelectToken(String path, JsonSelectSettings settings): JToken
    func SelectTokens(String path): IEnumerable`1
    func SelectTokens(String path, Boolean errorWhenNoMatch): IEnumerable`1
    func SelectTokens(String path, JsonSelectSettings settings): IEnumerable`1
    func DeepClone(): JToken
    func DeepClone(JsonCloneSettings settings): JToken
    func AddAnnotation(Object annotation): Void
    func Annotation(): T
    func Annotation(Type type): Object
    func Annotations(): IEnumerable`1
    func Annotations(Type type): IEnumerable`1
    func RemoveAnnotations(): Void
    func RemoveAnnotations(Type type): Void
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JConstructor {
    /// Writes this token to a .
    func WriteTo(JsonWriter writer, JsonConverter[] converters): Void
    /// Loads a  from a .
    func Load(JsonReader reader): JConstructor
    /// Loads a  from a .
    func Load(JsonReader reader, JsonLoadSettings settings): JConstructor
    func Children(): JEnumerable`1
    func Values(): IEnumerable`1
    func Descendants(): IEnumerable`1
    func DescendantsAndSelf(): IEnumerable`1
    func Add(Object content): Void
    func AddFirst(Object content): Void
    func CreateWriter(): JsonWriter
    func ReplaceAll(Object content): Void
    func RemoveAll(): Void
    func Merge(Object content): Void
    func Merge(Object content, JsonMergeSettings settings): Void
    func AddAfterSelf(Object content): Void
    func AddBeforeSelf(Object content): Void
    func Ancestors(): IEnumerable`1
    func AncestorsAndSelf(): IEnumerable`1
    func AfterSelf(): IEnumerable`1
    func BeforeSelf(): IEnumerable`1
    func Value(Object key): T
    func Children(): JEnumerable`1
    func Remove(): Void
    func Replace(JToken value): Void
    func ToString(): String
    func ToString(Formatting formatting, JsonConverter[] converters): String
    func CreateReader(): JsonReader
    func ToObject(): T
    func ToObject(Type objectType): Object
    func ToObject(JsonSerializer jsonSerializer): T
    func ToObject(Type objectType, JsonSerializer jsonSerializer): Object
    func SelectToken(String path): JToken
    func SelectToken(String path, Boolean errorWhenNoMatch): JToken
    func SelectToken(String path, JsonSelectSettings settings): JToken
    func SelectTokens(String path): IEnumerable`1
    func SelectTokens(String path, Boolean errorWhenNoMatch): IEnumerable`1
    func SelectTokens(String path, JsonSelectSettings settings): IEnumerable`1
    func DeepClone(): JToken
    func DeepClone(JsonCloneSettings settings): JToken
    func AddAnnotation(Object annotation): Void
    func Annotation(): T
    func Annotation(Type type): Object
    func Annotations(): IEnumerable`1
    func Annotations(Type type): IEnumerable`1
    func RemoveAnnotations(): Void
    func RemoveAnnotations(Type type): Void
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JContainer {
    /// Returns a collection of the child tokens of this token, in document order.
    func Children(): JEnumerable`1
    func Values(): IEnumerable`1
    /// Returns a collection of the descendant tokens for this token in document order.
    func Descendants(): IEnumerable`1
    /// Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
    func DescendantsAndSelf(): IEnumerable`1
    /// Adds the specified content as children of this .
    func Add(Object content): Void
    /// Adds the specified content as the first children of this .
    func AddFirst(Object content): Void
    /// Creates a  that can be used to add tokens to the .
    func CreateWriter(): JsonWriter
    /// Replaces the child nodes of this token with the specified content.
    func ReplaceAll(Object content): Void
    /// Removes the child nodes from this token.
    func RemoveAll(): Void
    /// Merge the specified content into this .
    func Merge(Object content): Void
    /// Merge the specified content into this  using .
    func Merge(Object content, JsonMergeSettings settings): Void
    func AddAfterSelf(Object content): Void
    func AddBeforeSelf(Object content): Void
    func Ancestors(): IEnumerable`1
    func AncestorsAndSelf(): IEnumerable`1
    func AfterSelf(): IEnumerable`1
    func BeforeSelf(): IEnumerable`1
    func Value(Object key): T
    /// Returns a collection of the child tokens of this token, in document order.
    func Children(): JEnumerable`1
    func Remove(): Void
    func Replace(JToken value): Void
    func WriteTo(JsonWriter writer, JsonConverter[] converters): Void
    func ToString(): String
    func ToString(Formatting formatting, JsonConverter[] converters): String
    func CreateReader(): JsonReader
    func ToObject(): T
    func ToObject(Type objectType): Object
    func ToObject(JsonSerializer jsonSerializer): T
    func ToObject(Type objectType, JsonSerializer jsonSerializer): Object
    func SelectToken(String path): JToken
    func SelectToken(String path, Boolean errorWhenNoMatch): JToken
    func SelectToken(String path, JsonSelectSettings settings): JToken
    func SelectTokens(String path): IEnumerable`1
    func SelectTokens(String path, Boolean errorWhenNoMatch): IEnumerable`1
    func SelectTokens(String path, JsonSelectSettings settings): IEnumerable`1
    func DeepClone(): JToken
    func DeepClone(JsonCloneSettings settings): JToken
    func AddAnnotation(Object annotation): Void
    func Annotation(): T
    func Annotation(Type type): Object
    func Annotations(): IEnumerable`1
    func Annotations(Type type): IEnumerable`1
    func RemoveAnnotations(): Void
    func RemoveAnnotations(Type type): Void
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JObject {
    /// Gets an  of  of this object's properties.
    func Properties(): IEnumerable`1
    /// Gets a  with the specified name.
    func Property(String name): JProperty
    /// Gets the  with the specified name.
            The exact name will be searched for first and if no matching property is found then
            the  will be used to match a property.
    func Property(String name, StringComparison comparison): JProperty
    /// Gets a  of  of this object's property values.
    func PropertyValues(): JEnumerable`1
    /// Loads a  from a .
    func Load(JsonReader reader): JObject
    /// Loads a  from a .
    func Load(JsonReader reader, JsonLoadSettings settings): JObject
    /// Load a  from a string that contains JSON.
    func Parse(String json): JObject
    /// Load a  from a string that contains JSON.
    func Parse(String json, JsonLoadSettings settings): JObject
    /// Creates a  from an object.
    func FromObject(Object o): JObject
    /// Creates a  from an object.
    func FromObject(Object o, JsonSerializer jsonSerializer): JObject
    /// Writes this token to a .
    func WriteTo(JsonWriter writer, JsonConverter[] converters): Void
    /// Gets the  with the specified property name.
    func GetValue(String propertyName): JToken
    /// Gets the  with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the  will be used to match a property.
    func GetValue(String propertyName, StringComparison comparison): JToken
    func TryGetValue(String propertyName, StringComparison comparison, JToken& value): Boolean
    /// Adds the specified property name.
    func Add(String propertyName, JToken value): Void
    /// Determines whether the JSON object has the specified property name.
    func ContainsKey(String propertyName): Boolean
    /// Removes the property with the specified name.
    func Remove(String propertyName): Boolean
    func TryGetValue(String propertyName, JToken& value): Boolean
    /// Returns an enumerator that can be used to iterate through the collection.
    func GetEnumerator(): IEnumerator`1
    func Children(): JEnumerable`1
    func Values(): IEnumerable`1
    func Descendants(): IEnumerable`1
    func DescendantsAndSelf(): IEnumerable`1
    func Add(Object content): Void
    func AddFirst(Object content): Void
    func CreateWriter(): JsonWriter
    func ReplaceAll(Object content): Void
    func RemoveAll(): Void
    func Merge(Object content): Void
    func Merge(Object content, JsonMergeSettings settings): Void
    func AddAfterSelf(Object content): Void
    func AddBeforeSelf(Object content): Void
    func Ancestors(): IEnumerable`1
    func AncestorsAndSelf(): IEnumerable`1
    func AfterSelf(): IEnumerable`1
    func BeforeSelf(): IEnumerable`1
    func Value(Object key): T
    func Children(): JEnumerable`1
    func Remove(): Void
    func Replace(JToken value): Void
    func ToString(): String
    func ToString(Formatting formatting, JsonConverter[] converters): String
    func CreateReader(): JsonReader
    func ToObject(): T
    func ToObject(Type objectType): Object
    func ToObject(JsonSerializer jsonSerializer): T
    func ToObject(Type objectType, JsonSerializer jsonSerializer): Object
    func SelectToken(String path): JToken
    func SelectToken(String path, Boolean errorWhenNoMatch): JToken
    func SelectToken(String path, JsonSelectSettings settings): JToken
    func SelectTokens(String path): IEnumerable`1
    func SelectTokens(String path, Boolean errorWhenNoMatch): IEnumerable`1
    func SelectTokens(String path, JsonSelectSettings settings): IEnumerable`1
    func DeepClone(): JToken
    func DeepClone(JsonCloneSettings settings): JToken
    func AddAnnotation(Object annotation): Void
    func Annotation(): T
    func Annotation(Type type): Object
    func Annotations(): IEnumerable`1
    func Annotations(Type type): IEnumerable`1
    func RemoveAnnotations(): Void
    func RemoveAnnotations(Type type): Void
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JProperty {
    /// Writes this token to a .
    func WriteTo(JsonWriter writer, JsonConverter[] converters): Void
    /// Loads a  from a .
    func Load(JsonReader reader): JProperty
    /// Loads a  from a .
    func Load(JsonReader reader, JsonLoadSettings settings): JProperty
    func Children(): JEnumerable`1
    func Values(): IEnumerable`1
    func Descendants(): IEnumerable`1
    func DescendantsAndSelf(): IEnumerable`1
    func Add(Object content): Void
    func AddFirst(Object content): Void
    func CreateWriter(): JsonWriter
    func ReplaceAll(Object content): Void
    func RemoveAll(): Void
    func Merge(Object content): Void
    func Merge(Object content, JsonMergeSettings settings): Void
    func AddAfterSelf(Object content): Void
    func AddBeforeSelf(Object content): Void
    func Ancestors(): IEnumerable`1
    func AncestorsAndSelf(): IEnumerable`1
    func AfterSelf(): IEnumerable`1
    func BeforeSelf(): IEnumerable`1
    func Value(Object key): T
    func Children(): JEnumerable`1
    func Remove(): Void
    func Replace(JToken value): Void
    func ToString(): String
    func ToString(Formatting formatting, JsonConverter[] converters): String
    func CreateReader(): JsonReader
    func ToObject(): T
    func ToObject(Type objectType): Object
    func ToObject(JsonSerializer jsonSerializer): T
    func ToObject(Type objectType, JsonSerializer jsonSerializer): Object
    func SelectToken(String path): JToken
    func SelectToken(String path, Boolean errorWhenNoMatch): JToken
    func SelectToken(String path, JsonSelectSettings settings): JToken
    func SelectTokens(String path): IEnumerable`1
    func SelectTokens(String path, Boolean errorWhenNoMatch): IEnumerable`1
    func SelectTokens(String path, JsonSelectSettings settings): IEnumerable`1
    func DeepClone(): JToken
    func DeepClone(JsonCloneSettings settings): JToken
    func AddAnnotation(Object annotation): Void
    func Annotation(): T
    func Annotation(Type type): Object
    func Annotations(): IEnumerable`1
    func Annotations(Type type): IEnumerable`1
    func RemoveAnnotations(): Void
    func RemoveAnnotations(Type type): Void
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JPropertyDescriptor {
    /// When overridden in a derived class, returns whether resetting an object changes its value.
    func CanResetValue(Object component): Boolean
    /// When overridden in a derived class, gets the current value of the property on a component.
    func GetValue(Object component): Object
    /// When overridden in a derived class, resets the value for this property of the component to the default value.
    func ResetValue(Object component): Void
    /// When overridden in a derived class, sets the value of the component to a different value.
    func SetValue(Object component, Object value): Void
    /// When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
    func ShouldSerializeValue(Object component): Boolean
    func AddValueChanged(Object component, EventHandler handler): Void
    func Equals(Object obj): Boolean
    func GetChildProperties(): PropertyDescriptorCollection
    func GetChildProperties(Attribute[] filter): PropertyDescriptorCollection
    func GetChildProperties(Object instance): PropertyDescriptorCollection
    func GetChildProperties(Object instance, Attribute[] filter): PropertyDescriptorCollection
    func GetEditor(Type editorBaseType): Object
    func GetHashCode(): Int32
    func RemoveValueChanged(Object component, EventHandler handler): Void
    func GetType(): Type
    func ToString(): String
  }
  class JRaw {
    /// Creates an instance of  with the content of the reader's current token.
    func Create(JsonReader reader): JRaw
    func WriteTo(JsonWriter writer, JsonConverter[] converters): Void
    func Equals(JValue other): Boolean
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
    func ToString(): String
    func ToString(String format): String
    func ToString(IFormatProvider formatProvider): String
    func ToString(String format, IFormatProvider formatProvider): String
    func CompareTo(JValue obj): Int32
    func AddAfterSelf(Object content): Void
    func AddBeforeSelf(Object content): Void
    func Ancestors(): IEnumerable`1
    func AncestorsAndSelf(): IEnumerable`1
    func AfterSelf(): IEnumerable`1
    func BeforeSelf(): IEnumerable`1
    func Value(Object key): T
    func Children(): JEnumerable`1
    func Children(): JEnumerable`1
    func Values(): IEnumerable`1
    func Remove(): Void
    func Replace(JToken value): Void
    func ToString(Formatting formatting, JsonConverter[] converters): String
    func CreateReader(): JsonReader
    func ToObject(): T
    func ToObject(Type objectType): Object
    func ToObject(JsonSerializer jsonSerializer): T
    func ToObject(Type objectType, JsonSerializer jsonSerializer): Object
    func SelectToken(String path): JToken
    func SelectToken(String path, Boolean errorWhenNoMatch): JToken
    func SelectToken(String path, JsonSelectSettings settings): JToken
    func SelectTokens(String path): IEnumerable`1
    func SelectTokens(String path, Boolean errorWhenNoMatch): IEnumerable`1
    func SelectTokens(String path, JsonSelectSettings settings): IEnumerable`1
    func DeepClone(): JToken
    func DeepClone(JsonCloneSettings settings): JToken
    func AddAnnotation(Object annotation): Void
    func Annotation(): T
    func Annotation(Type type): Object
    func Annotations(): IEnumerable`1
    func Annotations(Type type): IEnumerable`1
    func RemoveAnnotations(): Void
    func RemoveAnnotations(Type type): Void
    func GetType(): Type
  }
  class JsonCloneSettings {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonLoadSettings {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonMergeSettings {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JsonSelectSettings {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JToken {
    /// Compares the values of two tokens, including the values of all descendant tokens.
    func DeepEquals(JToken t1, JToken t2): Boolean
    /// Adds the specified content immediately after this token.
    func AddAfterSelf(Object content): Void
    /// Adds the specified content immediately before this token.
    func AddBeforeSelf(Object content): Void
    /// Returns a collection of the ancestor tokens of this token.
    func Ancestors(): IEnumerable`1
    /// Returns a collection of tokens that contain this token, and the ancestors of this token.
    func AncestorsAndSelf(): IEnumerable`1
    /// Returns a collection of the sibling tokens after this token, in document order.
    func AfterSelf(): IEnumerable`1
    /// Returns a collection of the sibling tokens before this token, in document order.
    func BeforeSelf(): IEnumerable`1
    func Value(Object key): T
    /// Returns a collection of the child tokens of this token, in document order.
    func Children(): JEnumerable`1
    /// Returns a collection of the child tokens of this token, in document order.
    func Children(): JEnumerable`1
    func Values(): IEnumerable`1
    /// Removes this token from its parent.
    func Remove(): Void
    /// Replaces this token with the specified token.
    func Replace(JToken value): Void
    /// Writes this token to a .
    func WriteTo(JsonWriter writer, JsonConverter[] converters): Void
    /// Returns the indented JSON for this token.
    func ToString(): String
    /// Returns the JSON for this token using the given formatting and converters.
    func ToString(Formatting formatting, JsonConverter[] converters): String
    /// Creates a  for this token.
    func CreateReader(): JsonReader
    /// Creates a  from an object.
    func FromObject(Object o): JToken
    /// Creates a  from an object using the specified .
    func FromObject(Object o, JsonSerializer jsonSerializer): JToken
    func ToObject(): T
    /// Creates an instance of the specified .NET type from the .
    func ToObject(Type objectType): Object
    func ToObject(JsonSerializer jsonSerializer): T
    /// Creates an instance of the specified .NET type from the  using the specified .
    func ToObject(Type objectType, JsonSerializer jsonSerializer): Object
    /// Creates a  from a .
    func ReadFrom(JsonReader reader): JToken
    /// Creates a  from a .
    func ReadFrom(JsonReader reader, JsonLoadSettings settings): JToken
    /// Load a  from a string that contains JSON.
    func Parse(String json): JToken
    /// Load a  from a string that contains JSON.
    func Parse(String json, JsonLoadSettings settings): JToken
    /// Creates a  from a .
    func Load(JsonReader reader, JsonLoadSettings settings): JToken
    /// Creates a  from a .
    func Load(JsonReader reader): JToken
    /// Selects a  using a JSONPath expression. Selects the token that matches the object path.
    func SelectToken(String path): JToken
    /// Selects a  using a JSONPath expression. Selects the token that matches the object path.
    func SelectToken(String path, Boolean errorWhenNoMatch): JToken
    /// Selects a  using a JSONPath expression. Selects the token that matches the object path.
    func SelectToken(String path, JsonSelectSettings settings): JToken
    /// Selects a collection of elements using a JSONPath expression.
    func SelectTokens(String path): IEnumerable`1
    /// Selects a collection of elements using a JSONPath expression.
    func SelectTokens(String path, Boolean errorWhenNoMatch): IEnumerable`1
    /// Selects a collection of elements using a JSONPath expression.
    func SelectTokens(String path, JsonSelectSettings settings): IEnumerable`1
    /// Creates a new instance of the . All child tokens are recursively cloned.
    func DeepClone(): JToken
    /// Creates a new instance of the . All child tokens are recursively cloned.
    func DeepClone(JsonCloneSettings settings): JToken
    /// Adds an object to the annotation list of this .
    func AddAnnotation(Object annotation): Void
    func Annotation(): T
    /// Gets the first annotation object of the specified type from this .
    func Annotation(Type type): Object
    func Annotations(): IEnumerable`1
    /// Gets a collection of annotations of the specified type for this .
    func Annotations(Type type): IEnumerable`1
    func RemoveAnnotations(): Void
    /// Removes the annotations of the specified type from this .
    func RemoveAnnotations(Type type): Void
    func GetType(): Type
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JTokenEqualityComparer {
    /// Determines whether the specified objects are equal.
    func Equals(JToken x, JToken y): Boolean
    /// Returns a hash code for the specified object.
    func GetHashCode(JToken obj): Int32
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JTokenReader {
    /// Reads the next JSON token from the underlying .
    func Read(): Boolean
    func ReadAsInt32(): Nullable`1
    func ReadAsString(): String
    func ReadAsBytes(): Byte[]
    func ReadAsDouble(): Nullable`1
    func ReadAsBoolean(): Nullable`1
    func ReadAsDecimal(): Nullable`1
    func ReadAsDateTime(): Nullable`1
    func Skip(): Void
    func Close(): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JTokenWriter {
    /// Flushes whatever is in the buffer to the underlying .
    func Flush(): Void
    /// Closes this writer.
            If  is set to true, the JSON is auto-completed.
    func Close(): Void
    /// Writes the beginning of a JSON object.
    func WriteStartObject(): Void
    /// Writes the beginning of a JSON array.
    func WriteStartArray(): Void
    /// Writes the start of a constructor with the given name.
    func WriteStartConstructor(String name): Void
    /// Writes the property name of a name/value pair on a JSON object.
    func WritePropertyName(String name): Void
    /// Writes a  value.
            An error will be raised if the value cannot be written as a single JSON token.
    func WriteValue(Object value): Void
    /// Writes a null value.
    func WriteNull(): Void
    /// Writes an undefined value.
    func WriteUndefined(): Void
    /// Writes raw JSON.
    func WriteRaw(String json): Void
    /// Writes a comment /*...*/ containing the specified text.
    func WriteComment(String text): Void
    /// Writes a  value.
    func WriteValue(String value): Void
    /// Writes a  value.
    func WriteValue(Int32 value): Void
    /// Writes a  value.
    func WriteValue(UInt32 value): Void
    /// Writes a  value.
    func WriteValue(Int64 value): Void
    /// Writes a  value.
    func WriteValue(UInt64 value): Void
    /// Writes a  value.
    func WriteValue(Single value): Void
    /// Writes a  value.
    func WriteValue(Double value): Void
    /// Writes a  value.
    func WriteValue(Boolean value): Void
    /// Writes a  value.
    func WriteValue(Int16 value): Void
    /// Writes a  value.
    func WriteValue(UInt16 value): Void
    /// Writes a  value.
    func WriteValue(Char value): Void
    /// Writes a  value.
    func WriteValue(Byte value): Void
    /// Writes a  value.
    func WriteValue(SByte value): Void
    /// Writes a  value.
    func WriteValue(Decimal value): Void
    /// Writes a  value.
    func WriteValue(DateTime value): Void
    /// Writes a [] value.
    func WriteValue(Byte[] value): Void
    /// Writes a  value.
    func WriteValue(TimeSpan value): Void
    /// Writes a  value.
    func WriteValue(Guid value): Void
    /// Writes a  value.
    func WriteValue(Uri value): Void
    func WriteEndObject(): Void
    func WriteEndArray(): Void
    func WriteEndConstructor(): Void
    func WritePropertyName(String name, Boolean escape): Void
    func WriteEnd(): Void
    func WriteToken(JsonReader reader): Void
    func WriteToken(JsonReader reader, Boolean writeChildren): Void
    func WriteToken(JsonToken token, Object value): Void
    func WriteToken(JsonToken token): Void
    func WriteRawValue(String json): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteWhitespace(String ws): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JValue {
    /// Creates a  comment with the given value.
    func CreateComment(String value): JValue
    /// Creates a  string with the given value.
    func CreateString(String value): JValue
    /// Creates a  null value.
    func CreateNull(): JValue
    /// Creates a  undefined value.
    func CreateUndefined(): JValue
    /// Writes this token to a .
    func WriteTo(JsonWriter writer, JsonConverter[] converters): Void
    /// Indicates whether the current object is equal to another object of the same type.
    func Equals(JValue other): Boolean
    /// Determines whether the specified  is equal to the current .
    func Equals(Object obj): Boolean
    /// Serves as a hash function for a particular type.
    func GetHashCode(): Int32
    /// Returns a  that represents this instance.
    func ToString(): String
    /// Returns a  that represents this instance.
    func ToString(String format): String
    /// Returns a  that represents this instance.
    func ToString(IFormatProvider formatProvider): String
    /// Returns a  that represents this instance.
    func ToString(String format, IFormatProvider formatProvider): String
    /// Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
    func CompareTo(JValue obj): Int32
    func AddAfterSelf(Object content): Void
    func AddBeforeSelf(Object content): Void
    func Ancestors(): IEnumerable`1
    func AncestorsAndSelf(): IEnumerable`1
    func AfterSelf(): IEnumerable`1
    func BeforeSelf(): IEnumerable`1
    func Value(Object key): T
    func Children(): JEnumerable`1
    func Children(): JEnumerable`1
    func Values(): IEnumerable`1
    func Remove(): Void
    func Replace(JToken value): Void
    func ToString(Formatting formatting, JsonConverter[] converters): String
    func CreateReader(): JsonReader
    func ToObject(): T
    func ToObject(Type objectType): Object
    func ToObject(JsonSerializer jsonSerializer): T
    func ToObject(Type objectType, JsonSerializer jsonSerializer): Object
    func SelectToken(String path): JToken
    func SelectToken(String path, Boolean errorWhenNoMatch): JToken
    func SelectToken(String path, JsonSelectSettings settings): JToken
    func SelectTokens(String path): IEnumerable`1
    func SelectTokens(String path, Boolean errorWhenNoMatch): IEnumerable`1
    func SelectTokens(String path, JsonSelectSettings settings): IEnumerable`1
    func DeepClone(): JToken
    func DeepClone(JsonCloneSettings settings): JToken
    func AddAnnotation(Object annotation): Void
    func Annotation(): T
    func Annotation(Type type): Object
    func Annotations(): IEnumerable`1
    func Annotations(Type type): IEnumerable`1
    func RemoveAnnotations(): Void
    func RemoveAnnotations(Type type): Void
    func GetType(): Type
  }
  class BinaryConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    /// Determines whether this instance can convert the specified object type.
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class BsonObjectIdConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    /// Determines whether this instance can convert the specified object type.
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class CustomCreationConverter`1 {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    /// Creates an object which will then be populated by the serializer.
    func Create(Type objectType): T
    /// Determines whether this instance can convert the specified object type.
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class DataSetConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    /// Determines whether this instance can convert the specified value type.
    func CanConvert(Type valueType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class DataTableConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    /// Determines whether this instance can convert the specified value type.
    func CanConvert(Type valueType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class DateTimeConverterBase {
    /// Determines whether this instance can convert the specified object type.
    func CanConvert(Type objectType): Boolean
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class IsoDateTimeConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class JavaScriptDateTimeConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class KeyValuePairConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    /// Determines whether this instance can convert the specified object type.
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class RegexConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    /// Determines whether this instance can convert the specified object type.
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class StringEnumConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    /// Determines whether this instance can convert the specified object type.
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class UnixDateTimeConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class VersionConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    /// Determines whether this instance can convert the specified object type.
    func CanConvert(Type objectType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class XmlNodeConverter {
    /// Writes the JSON representation of the object.
    func WriteJson(JsonWriter writer, Object value, JsonSerializer serializer): Void
    /// Reads the JSON representation of the object.
    func ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer): Object
    /// Determines whether this instance can convert the specified value type.
    func CanConvert(Type valueType): Boolean
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class BsonObjectId {
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class BsonReader {
    /// Reads the next JSON token from the underlying .
    func Read(): Boolean
    /// Changes the reader's state to .
            If  is set to true, the underlying  is also closed.
    func Close(): Void
    func ReadAsInt32(): Nullable`1
    func ReadAsString(): String
    func ReadAsBytes(): Byte[]
    func ReadAsDouble(): Nullable`1
    func ReadAsBoolean(): Nullable`1
    func ReadAsDecimal(): Nullable`1
    func ReadAsDateTime(): Nullable`1
    func Skip(): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
  class BsonWriter {
    /// Flushes whatever is in the buffer to the underlying  and also flushes the underlying stream.
    func Flush(): Void
    /// Writes a comment /*...*/ containing the specified text.
    func WriteComment(String text): Void
    /// Writes the start of a constructor with the given name.
    func WriteStartConstructor(String name): Void
    /// Writes raw JSON.
    func WriteRaw(String json): Void
    /// Writes raw JSON where a value is expected and updates the writer's state.
    func WriteRawValue(String json): Void
    /// Writes the beginning of a JSON array.
    func WriteStartArray(): Void
    /// Writes the beginning of a JSON object.
    func WriteStartObject(): Void
    /// Writes the property name of a name/value pair on a JSON object.
    func WritePropertyName(String name): Void
    /// Closes this writer.
            If  is set to true, the underlying  is also closed.
            If  is set to true, the JSON is auto-completed.
    func Close(): Void
    /// Writes a  value.
            An error will raised if the value cannot be written as a single JSON token.
    func WriteValue(Object value): Void
    /// Writes a null value.
    func WriteNull(): Void
    /// Writes an undefined value.
    func WriteUndefined(): Void
    /// Writes a  value.
    func WriteValue(String value): Void
    /// Writes a  value.
    func WriteValue(Int32 value): Void
    /// Writes a  value.
    func WriteValue(UInt32 value): Void
    /// Writes a  value.
    func WriteValue(Int64 value): Void
    /// Writes a  value.
    func WriteValue(UInt64 value): Void
    /// Writes a  value.
    func WriteValue(Single value): Void
    /// Writes a  value.
    func WriteValue(Double value): Void
    /// Writes a  value.
    func WriteValue(Boolean value): Void
    /// Writes a  value.
    func WriteValue(Int16 value): Void
    /// Writes a  value.
    func WriteValue(UInt16 value): Void
    /// Writes a  value.
    func WriteValue(Char value): Void
    /// Writes a  value.
    func WriteValue(Byte value): Void
    /// Writes a  value.
    func WriteValue(SByte value): Void
    /// Writes a  value.
    func WriteValue(Decimal value): Void
    /// Writes a  value.
    func WriteValue(DateTime value): Void
    /// Writes a [] value.
    func WriteValue(Byte[] value): Void
    /// Writes a  value.
    func WriteValue(Guid value): Void
    /// Writes a  value.
    func WriteValue(TimeSpan value): Void
    /// Writes a  value.
    func WriteValue(Uri value): Void
    /// Writes a [] value that represents a BSON object id.
    func WriteObjectId(Byte[] value): Void
    /// Writes a BSON regex.
    func WriteRegex(String pattern, String options): Void
    func WriteEndObject(): Void
    func WriteEndArray(): Void
    func WriteEndConstructor(): Void
    func WritePropertyName(String name, Boolean escape): Void
    func WriteEnd(): Void
    func WriteToken(JsonReader reader): Void
    func WriteToken(JsonReader reader, Boolean writeChildren): Void
    func WriteToken(JsonToken token, Object value): Void
    func WriteToken(JsonToken token): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteValue(Nullable`1 value): Void
    func WriteWhitespace(String ws): Void
    func GetType(): Type
    func ToString(): String
    func Equals(Object obj): Boolean
    func GetHashCode(): Int32
  }
}

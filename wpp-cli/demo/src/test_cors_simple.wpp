// CORS Library Test with String Features
// Testing CORS configuration with new string comparison and manipulation

func main() {
    print("=== W++ CORS Library Test ===")
    print("")

    // Test 1: Default CORS Configuration
    print("--- Test 1: Default CORS Configuration ---")
    let default_origin = "*"
    let default_methods = "GET, POST, PUT, DELETE, PATCH, OPTIONS"
    let default_headers = "Content-Type, Authorization, X-Requested-With"
    let default_max_age = 86400

    print("Default Origin:", default_origin)
    print("Default Methods:", default_methods)
    print("Default Headers:", default_headers)
    print("Default Max Age:", default_max_age, "seconds")
    print("")

    // Test 2: Strict CORS Configuration
    print("--- Test 2: Strict CORS Configuration ---")
    let strict_origin = "https://example.com"
    let strict_methods = "GET, POST"
    let strict_headers = "Content-Type"
    let strict_credentials = true
    let strict_max_age = 3600

    print("Strict Origin:", strict_origin)
    print("Strict Methods:", strict_methods)
    print("Strict Headers:", strict_headers)
    print("Allow Credentials:", strict_credentials)
    print("Max Age:", strict_max_age, "seconds")
    print("")

    // Test 3: Origin Validation (with string comparison!)
    print("--- Test 3: Origin Validation ---")
    let test_origin = "https://example.com"

    // Wildcard allows all
    if (default_origin == "*") {
        print("Wildcard '*' allows all origins: true")
    }

    // Exact match
    if (test_origin == strict_origin) {
        print("Origin matches strict config: true")
    }

    // Different origin
    let other_origin = "https://malicious.com"
    if (other_origin != strict_origin) {
        print("Malicious origin rejected: true")
    }
    print("")

    // Test 4: Method Checks (with string comparison!)
    print("--- Test 4: Method Checks ---")
    let test_method = "OPTIONS"

    if (test_method == "OPTIONS") {
        print("Method is preflight: true")
    }

    let get_method = "GET"
    if (get_method != "OPTIONS") {
        print("GET is not a preflight: true")
    }
    print("")

    // Test 5: Credentials Handling (with int_to_string!)
    print("--- Test 5: Credentials Handling ---")
    let credentials_enabled = 1
    let credentials_str = int_to_string(credentials_enabled)

    let cred_header_part1 = "Allow-Credentials: "
    let cred_header = cred_header_part1 + credentials_str
    print(cred_header)
    print("")

    // Test 6: Max Age Header (with int_to_string!)
    print("--- Test 6: Max Age Header ---")
    let max_age_str = int_to_string(strict_max_age)
    let max_age_part1 = "Max-Age: "
    let max_age_header = max_age_part1 + max_age_str
    print(max_age_header)
    print("")

    // Test 7: String Length Checks
    print("--- Test 7: String Length Validation ---")
    let header_name = "Authorization"
    let name_len = strlen(header_name)
    print("Header name:", header_name)
    print("Header name length:", name_len)
    if (name_len > 0) {
        print("Header name is valid: true")
    }
    print("")

    print("=== All CORS Tests Complete! ===")
    print("String features working: comparison, length, int_to_string, concatenation!")
    return 0
}

{
  "Print Statement": {
    "prefix": "print",
    "body": ["print(\"$1\");"],
    "description": "Print something"
  },
  "Let Declaration": {
    "prefix": "let",
    "body": ["let $1 = $2;"],
    "description": "Declare a mutable variable"
  },
  "Const Declaration": {
    "prefix": "const",
    "body": ["const $1 = $2;"],
    "description": "Declare an immutable constant"
  },
  "Async Function": {
    "prefix": "async",
    "body": ["async $1 => {", "  $2", "}"],
    "description": "Define an async function"
  },
  "Await": {
    "prefix": "await",
    "body": ["await $1"],
    "description": "Await an async operation"
  },
  "Return": {
    "prefix": "return",
    "body": ["return $1;"],
    "description": "Return a value"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if ($1) {", "  $2", "}"],
    "description": "If statement"
  },
  "If Else Statement": {
    "prefix": "ifelse",
    "body": ["if ($1) {", "  $2", "} else {", "  $3", "}"],
    "description": "If-else statement"
  },
  "While Loop": {
    "prefix": "while",
    "body": ["while ($1) {", "  $2", "}"],
    "description": "While loop"
  },
  "For Loop": {
    "prefix": "for",
    "body": ["for (let $1 = 0; $1 < $2; $1++) {", "  $3", "}"],
    "description": "For loop"
  },
  "Break": {
    "prefix": "break",
    "body": ["break;"],
    "description": "Break out of a loop"
  },
  "Continue": {
    "prefix": "continue",
    "body": ["continue;"],
    "description": "Continue to next loop iteration"
  },
  "True": {
    "prefix": "true",
    "body": ["true"],
    "description": "Boolean true"
  },
  "False": {
    "prefix": "false",
    "body": ["false"],
    "description": "Boolean false"
  },
  "Import": {
    "prefix": "import",
    "body": ["import { $1 } from \"$2\""],
    "description": "Import symbols from another module"
  },
  "Export": {
    "prefix": "export",
    "body": ["export $1"],
    "description": "Export symbol for other modules"
  },
  "Try-Catch": {
    "prefix": "try",
    "body": ["try {", "  $1", "} catch ($2) {", "  $3", "}"],
    "description": "Try-catch exception handling"
  },
  "Try-Catch-Finally": {
    "prefix": "tryfinally",
    "body": ["try {", "  $1", "} catch ($2) {", "  $3", "} finally {", "  $4", "}"],
    "description": "Try-catch-finally exception handling"
  },
  "Throw": {
    "prefix": "throw",
    "body": ["throw $1"],
    "description": "Throw an exception"
  },
  "Funcy": {
    "prefix": "funcy",
    "body": ["funcy $1($2) {", "  $3", "}"],
    "description": "Define a function (W++ style)"
  },
  "Funcy with Return Type": {
    "prefix": "funcyr",
    "body": ["funcy $1($2) -> $3 {", "  $4", "}"],
    "description": "Define a function with return type"
  },
  "Type Alias": {
    "prefix": "type",
    "body": ["type $1 = {", "  $2", "}"],
    "description": "Define a type alias"
  },
  "Entity": {
    "prefix": "entity",
    "body": ["entity $1 {", "  $2", "}"],
    "description": "Define a W++ entity"
  },
  "Entity with Inheritance": {
    "prefix": "entityalters",
    "body": ["entity $1 alters $2 {", "  $3", "}"],
    "description": "Define an entity that inherits from another"
  },
  "Me": {
    "prefix": "me",
    "body": ["me"],
    "description": "Reference the current entity instance"
  },
  "New": {
    "prefix": "new",
    "body": ["new($1)"],
    "description": "Create a new entity instance"
  },
  "Switch": {
    "prefix": "switch",
    "body": ["switch ($1) {", "  case $2:", "    $3", "    break;", "  default:", "    $4", "}"],
    "description": "Switch-case statement"
  },
  "Case": {
    "prefix": "case",
    "body": ["case $1:", "  $2"],
    "description": "Case label inside switch"
  },
  "Default": {
    "prefix": "default",
    "body": ["default:", "  $1"],
    "description": "Default case in switch"
  }
}
